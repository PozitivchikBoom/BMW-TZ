import json
from aianalyzer import analyze_message
import csv
import matplotlib.pyplot as plt
from collections import Counter, defaultdict
from datetime import datetime, timedelta
from dateutil import parser
import numpy as np

def is_broken_promise(msg_index, messages):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø—ñ—Å–ª—è msg_index —î —Ö–æ—á –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    –¥–æ –∫—ñ–Ω—Ü—è —Ç–æ–≥–æ –∂ –¥–Ω—è.
    """
    msg = messages[msg_index]
    msg_time = parser.parse(msg["date"])
    end_of_day = msg_time.replace(hour=23, minute=59, second=59)

    for i in range(msg_index + 1, len(messages)):
        m = messages[i]
        author = m.get("from_id") or m.get("sender_id")
        if not author:
            continue
        t = parser.parse(m["date"])
        if t > end_of_day:
            break
        if author == msg.get("from_id") and m.get("text"):
            return True
    return False

def visualize_problems(problems):
    categories = {
        "–û–±—ñ—Ü—è–Ω–∫–∞ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–∞": "broken_promise",
        "–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞ –ª–µ–∫—Å–∏–∫–∞": "profanity",
        "–ù–µ–≥–∞—Ç–∏–≤ –∫–ª—ñ—î–Ω—Ç–∞": "negative_feedback",
        "–ú–µ–Ω–µ–¥–∂–µ—Ä —É—Ö–∏–ª—è—î—Ç—å—Å—è": "manager_evasive",
        "–ü–æ–≥–∞–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è": "poor_consultation"
    }

    # --- 1. –ó–∞–≥–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ–±–ª–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö ---

    counts = Counter()
    for p in problems:
        if p.get("broken_promise"):
            counts["–û–±—ñ—Ü—è–Ω–∫–∞ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–∞"] += 1
        for label, key in categories.items():
            if p["analysis"].get(key):
                counts[label] += 1

    if not counts:
        print("‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞.")
        return

    color_map = {
        "–û–±—ñ—Ü—è–Ω–∫–∞ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–∞": "#FF6F61",
        "–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞ –ª–µ–∫—Å–∏–∫–∞": "#6B5B95",
        "–ù–µ–≥–∞—Ç–∏–≤ –∫–ª—ñ—î–Ω—Ç–∞": "#88B04B",
        "–ú–µ–Ω–µ–¥–∂–µ—Ä —É—Ö–∏–ª—è—î—Ç—å—Å—è": "#F7CAC9",
        "–ü–æ–≥–∞–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è": "#92A8D1"
    }

    labels = list(counts.keys())
    values = [counts[label] for label in labels]
    colors = [color_map.get(label, "gray") for label in labels]

    plt.figure(figsize=(10, 6))
    bars = plt.bar(labels, values, color=colors)
    plt.title("–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å", fontsize=14)
    plt.xlabel("–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó", fontsize=12)
    plt.ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å", fontsize=12)
    plt.xticks(rotation=25)

    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2, height + 0.3, str(height),
                 ha='center', va='bottom', fontsize=10)

    plt.tight_layout()
    plt.savefig("analysis_report.png")
    plt.close()

    # --- 2. –ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ–±–ª–µ–º –ø–æ —á–∞—Ç–∞—Ö ---

    # –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö: –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —á–∞—Ç—É —Ä–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
    chat_problems = defaultdict(lambda: Counter())

    for p in problems:
        chat = p.get("chat", "Unknown")
        if p.get("broken_promise"):
            chat_problems[chat]["–û–±—ñ—Ü—è–Ω–∫–∞ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–∞"] += 1
        for label, key in categories.items():
            if p["analysis"].get(key):
                chat_problems[chat][label] += 1

    if not chat_problems:
        print("‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞ –ø–æ —á–∞—Ç–∞—Ö.")
        return

    chats = list(chat_problems.keys())
    chats.sort()
    category_list = list(categories.keys())
    category_list.insert(0, "–û–±—ñ—Ü—è–Ω–∫–∞ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–∞")  # –≤—Å—Ç–∞–≤–ª—è—î–º–æ —É –ø–æ—á–∞—Ç–æ–∫

    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è stacked bar chart
    data = []
    for category in category_list:
        data.append([chat_problems[chat].get(category, 0) for chat in chats])

    ind = np.arange(len(chats))
    width = 0.6

    plt.figure(figsize=(12, 8))

    bottom = np.zeros(len(chats))
    for i, category in enumerate(category_list):
        plt.bar(ind, data[i], width, bottom=bottom, label=category, color=color_map.get(category, "gray"))
        bottom += np.array(data[i])

    plt.xlabel("–ß–∞—Ç–∏", fontsize=12)
    plt.ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º", fontsize=12)
    plt.title("–†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–æ–±–ª–µ–º –ø–æ —á–∞—Ç–∞—Ö", fontsize=14)
    plt.xticks(ind, chats, rotation=45, ha='right')
    plt.legend()
    plt.tight_layout()
    plt.savefig("analysis_by_chats.png")
    plt.close()

    print("üìä –ì—Ä–∞—Ñ—ñ–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª–∞—Ö analysis_report.png —Ç–∞ analysis_by_chats.png")

def save_detailed_report(problems):
    with open("analysis_report_detailed.csv", "w", encoding="utf-8", newline="") as f:
        writer = csv.writer(f)
        writer.writerow([
            "–ß–∞—Ç",
            "–î–∞—Ç–∞",
            "–¢–µ–∫—Å—Ç (–∫–æ—Ä–æ—Ç–∫–∏–π)",
            "–û–±—ñ—Ü—è–Ω–∫–∞",
            "–ü—Ä–æ–ø—É—â–µ–Ω–∞ –æ–±—ñ—Ü—è–Ω–∫–∞",
            "–ú–∞—Ç—é–∫–∏",
            "–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤—ñ–¥–≥—É–∫",
            "–ü–æ–≥–∞–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è",
            "–£—Ö–∏–ª—å–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        ])

        for p in problems:
            analysis = p["analysis"]
            text_short = p["text"][:100].replace("\n", " ")
            writer.writerow([
                p["chat"],
                p["date"],
                text_short,
                analysis.get("promise", False),
                p.get("broken_promise", False),
                analysis.get("profanity", False),
                analysis.get("negative_feedback", False),
                analysis.get("poor_consultation", False),
                analysis.get("manager_evasive", False),
            ])

def save_report(problems, filename="analysis_report.csv"):
    with open(filename, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([
            "Chat", "Date", "Message", "Promise", "Negative",
            "Evasive", "Poor Consultation", "Profanity", "Broken Promise"
        ])
        for p in problems:
            writer.writerow([
                p["chat"],
                p["date"],
                p["text"],
                p["analysis"]["promise"],
                p["analysis"]["negative_feedback"],
                p["analysis"]["manager_evasive"],
                p["analysis"]["poor_consultation"],
                p["analysis"]["profanity"],
                p.get("broken_promise", False)
            ])

def extract_text(msg):
    """
    –í–∏—Ç—è–≥—É—î —Ç–µ–∫—Å—Ç –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤—ñ–Ω —î.
    –Ø–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—É–ª—å—Ç–∏–º–µ–¥—ñ–π–Ω–µ, –º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ –ª–æ–≥—ñ–∫—É —Ç—É—Ç.
    """
    # –Ø–∫—â–æ —î –ø–æ–ª–µ 'text' —ñ –≤–æ–Ω–æ —Ä—è–¥–æ–∫ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
    text = msg.get("text")
    if isinstance(text, str):
        return text

    # –Ø–∫—â–æ —î 'message' —ñ —Ü–µ —Ä—è–¥–æ–∫ (—ñ–Ω–æ–¥—ñ —ñ—Å—Ç–æ—Ä—ñ—è –º–æ–∂–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–æ-—ñ–Ω—à–æ–º—É)
    text = msg.get("message")
    if isinstance(text, str):
        return text

    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É —ñ–Ω—à–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤, —è–∫—â–æ —Ç—Ä–µ–±–∞

    return ""  # –ü–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫, —è–∫—â–æ —Ç–µ–∫—Å—Ç—É –Ω–µ–º–∞

def analyze_promises():
    with open("data/chat_history.json", encoding="utf-8") as f:
        history = json.load(f)

    problems = []

    for chat_id, chat_data in history.items():
        messages = chat_data.get("messages", [])
        for i, msg in enumerate(messages):
            text = extract_text(msg)
            if not text:
                continue

            analysis = analyze_message(text)

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–æ–¥–æ–≤–∂–µ–Ω—É –æ–±—ñ—Ü—è–Ω–∫—É
            if analysis["promise"]:
                broken = not is_broken_promise(i, messages)
                if broken:
                    problems.append({
                        "chat": chat_data.get("name", "Unknown"),
                        "text": text,
                        "date": msg.get("date"),
                        "analysis": analysis,
                        "broken_promise": True
                    })
            elif any(analysis.values()):
                problems.append({
                    "chat": chat_data.get("name", "Unknown"),
                    "text": text,
                    "date": msg.get("date"),
                    "analysis": analysis,
                    "broken_promise": False
                })

    print(f"üîç –í–∏—è–≤–ª–µ–Ω–æ {len(problems)} –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:")
    for p in problems:
        print(f"- {p['chat']} | {p['date']} | {p['text']}")
        print(f"  –ê–Ω–∞–ª—ñ–∑: {p['analysis']}")
    save_report(problems)
    print(f"–ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ analysis_report.csv")
    save_report(problems)
    visualize_problems(problems)
    print(f"üìä –ì—Ä–∞—Ñ—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ analysis_report.png")